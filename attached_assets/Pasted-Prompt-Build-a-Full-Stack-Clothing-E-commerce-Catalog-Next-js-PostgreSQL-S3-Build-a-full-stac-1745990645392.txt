Prompt: Build a Full-Stack Clothing E-commerce Catalog (Next.js + PostgreSQL + S3)
Build a full-stack e-commerce catalog website for a clothing store using the following stack:

Frontend & Backend: Next.js (App Router, TypeScript)

Database: PostgreSQL (via Prisma ORM)

File Upload: AWS S3 using signed URL upload

Styling: Tailwind CSS

Validation: Zod

Testing: Jest, Supertest, and React Testing Library

✅ Public Site Features
Home page showing featured products and new arrivals

Browse products by category (Men, Women, Kids, Accessories)

Product detail page showing:

Name, price, description, inventory count

Image gallery (stored in S3)

Category-based and price-range filters

Search bar to filter products

SEO-friendly slugs in URLs

Responsive layout with light/dark mode toggle using localStorage

✅ Admin Dashboard (No Login Required)
Accessible at /admin

Full CRUD:

Add/Edit/Delete products

Add/Edit/Delete categories

Image upload for products using AWS S3 (secure signed URL approach)

Form validation using Zod

Real-time form feedback and error handling

✅ Backend (API Routes in Next.js)
/api/products:

GET all products

POST new product

PATCH update product

DELETE remove product

/api/categories:

Full CRUD

/api/s3/upload:

Returns signed URL for secure image upload

All API routes are validated with Zod and return JSON responses

✅ Database Schema (Prisma)
prisma
Copy
Edit
model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  products  Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  price       Float
  description String
  inventory   Int
  images      ProductImage[]
  categoryId  Int
  createdAt   DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [id])
}

model ProductImage {
  id        Int    @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}
✅ Testing Stack
Jest: unit testing

Supertest: API route testing

@testing-library/react: component and interaction tests

Basic test coverage for:

Product form

Category listing

API route logic

✅ Developer Support
.env.example with DB + AWS S3 placeholders

README.md with setup instructions:

Local dev (npm install, prisma migrate, npm run dev)

Deployment guide for Vercel + Railway

Preconfigured TailwindCSS + dark mode variants