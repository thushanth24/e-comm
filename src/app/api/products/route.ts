import { createClient } from '@supabase/supabase-js';
import { NextResponse } from 'next/server';

// Initialize Supabase client without authentication
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

export const dynamic = 'force-dynamic';

// GET all products with optional filtering
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    
    // Parse query parameters
    const category = searchParams.get('category');
    const featured = searchParams.get('featured');
    const minPrice = searchParams.get('minPrice');
    const maxPrice = searchParams.get('maxPrice');
    const limit = searchParams.get('limit');
    
    // Start building the query
    let query = supabase
      .from('Product')
      .select(`
        *,
        categories!inner(*),
        ProductImage(*)
      `);
    
    // Apply filters
    if (category) {
      query = query.eq('categories.slug', category);
    }
    
    if (featured === 'true') {
      query = query.eq('featured', true);
    }
    
    if (minPrice) {
      query = query.gte('price', parseFloat(minPrice));
    }
    
    if (maxPrice) {
      query = query.lte('price', parseFloat(maxPrice));
    }
    
    // Apply limit if specified
    if (limit) {
      query = query.limit(parseInt(limit));
    }
    
    // Execute the query
    const { data: products, error } = await query.order('created_at', { ascending: false });
    
    if (error) {
      throw error;
    }
    
    // Transform the data to match the expected format
    const formattedProducts = products.map(product => ({
      ...product,
images: product.ProductImage,
      category: product.categories,
      ProductImage: undefined,
      categories: undefined
    }));
    
    return NextResponse.json(formattedProducts);
  } catch (error) {
    console.error('Error fetching products:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

// POST create a new product
export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    // Basic validation
    if (!body.name || !body.price || !body.categoryId) {
      return new NextResponse('Missing required fields', { status: 400 });
    }
    
    // Create product data
    const productData = {
      name: body.name,
      description: body.description || '',
      price: parseFloat(body.price),
      categoryId: body.categoryId,
      stock: parseInt(body.stock) || 0,
      featured: Boolean(body.featured) || false,
      slug: body.name.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '')
    };
    
    // Insert product
    const { data: product, error: productError } = await supabase
      .from('Product')
      .insert(productData)
      .select()
      .single();
    
    if (productError) throw productError;
    
    // Insert images if provided
    if (body.images && body.images.length > 0) {
      const imageInserts = body.images.map((url: string) => {
        // Extract the path from the full URL if it's a public URL
        const storagePath = url.includes('supabase.co/storage/v1/object/public/product-images/') 
          ? url.split('product-images/')[1] 
          : url;
        
        return {
          productId: product.id,
          storage_path: storagePath
          // public_url is generated by the database
        };
      });
      
      const { error: imageError } = await supabase
        .from('ProductImage')
        .insert(imageInserts);
      
      if (imageError) throw imageError;
    }
    
    // Fetch the created product with relations
    const { data: createdProduct, error: fetchError } = await supabase
      .from('Product')
      .select(`
        *,
        categories(*),
        ProductImage(*)
      `)
      .eq('id', product.id)
      .single();
    
    if (fetchError) throw fetchError;
    
    // Format the response
    const formattedProduct = {
      ...createdProduct,
      images: createdProduct.product_images,
      category: createdProduct.categories,
      ProductImage: undefined,
      categories: undefined
    };
    
    return NextResponse.json(formattedProduct, { status: 201 });
  } catch (error) {
    console.error('Error creating product:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}

